// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package cloud.dragonx.plugin.flutter.dji;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Version {
    private @Nullable String string;
    public @Nullable String getString() { return string; }
    public void setString(@Nullable String setterArg) {
      this.string = setterArg;
    }

    public static final class Builder {
      private @Nullable String string;
      public @NonNull Builder setString(@Nullable String setterArg) {
        this.string = setterArg;
        return this;
      }
      public @NonNull Version build() {
        Version pigeonReturn = new Version();
        pigeonReturn.setString(string);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(string);
      return toListResult;
    }
    static @NonNull Version fromList(@NonNull ArrayList<Object> list) {
      Version pigeonResult = new Version();
      Object string = list.get(0);
      pigeonResult.setString((String)string);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Battery {
    private @Nullable Long level;
    public @Nullable Long getLevel() { return level; }
    public void setLevel(@Nullable Long setterArg) {
      this.level = setterArg;
    }

    public static final class Builder {
      private @Nullable Long level;
      public @NonNull Builder setLevel(@Nullable Long setterArg) {
        this.level = setterArg;
        return this;
      }
      public @NonNull Battery build() {
        Battery pigeonReturn = new Battery();
        pigeonReturn.setLevel(level);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(level);
      return toListResult;
    }
    static @NonNull Battery fromList(@NonNull ArrayList<Object> list) {
      Battery pigeonResult = new Battery();
      Object level = list.get(0);
      pigeonResult.setLevel((level == null) ? null : ((level instanceof Integer) ? (Integer)level : (Long)level));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Drone {
    private @Nullable String uuid;
    public @Nullable String getUuid() { return uuid; }
    public void setUuid(@Nullable String setterArg) {
      this.uuid = setterArg;
    }

    private @Nullable String status;
    public @Nullable String getStatus() { return status; }
    public void setStatus(@Nullable String setterArg) {
      this.status = setterArg;
    }

    private @Nullable String error;
    public @Nullable String getError() { return error; }
    public void setError(@Nullable String setterArg) {
      this.error = setterArg;
    }

    private @Nullable Double batteryPercent;
    public @Nullable Double getBatteryPercent() { return batteryPercent; }
    public void setBatteryPercent(@Nullable Double setterArg) {
      this.batteryPercent = setterArg;
    }

    private @Nullable Double altitude;
    public @Nullable Double getAltitude() { return altitude; }
    public void setAltitude(@Nullable Double setterArg) {
      this.altitude = setterArg;
    }

    private @Nullable Double latitude;
    public @Nullable Double getLatitude() { return latitude; }
    public void setLatitude(@Nullable Double setterArg) {
      this.latitude = setterArg;
    }

    private @Nullable Double longitude;
    public @Nullable Double getLongitude() { return longitude; }
    public void setLongitude(@Nullable Double setterArg) {
      this.longitude = setterArg;
    }

    private @Nullable Double speed;
    public @Nullable Double getSpeed() { return speed; }
    public void setSpeed(@Nullable Double setterArg) {
      this.speed = setterArg;
    }

    private @Nullable Double roll;
    public @Nullable Double getRoll() { return roll; }
    public void setRoll(@Nullable Double setterArg) {
      this.roll = setterArg;
    }

    private @Nullable Double pitch;
    public @Nullable Double getPitch() { return pitch; }
    public void setPitch(@Nullable Double setterArg) {
      this.pitch = setterArg;
    }

    private @Nullable Double yaw;
    public @Nullable Double getYaw() { return yaw; }
    public void setYaw(@Nullable Double setterArg) {
      this.yaw = setterArg;
    }

    private @Nullable Double homeLatitude;
    public @Nullable Double getHomeLatitude() { return homeLatitude; }
    public void setHomeLatitude(@Nullable Double setterArg) {
      this.homeLatitude = setterArg;
    }

    private @Nullable Double homeLongitude;
    public @Nullable Double getHomeLongitude() { return homeLongitude; }
    public void setHomeLongitude(@Nullable Double setterArg) {
      this.homeLongitude = setterArg;
    }

    public static final class Builder {
      private @Nullable String uuid;
      public @NonNull Builder setUuid(@Nullable String setterArg) {
        this.uuid = setterArg;
        return this;
      }
      private @Nullable String status;
      public @NonNull Builder setStatus(@Nullable String setterArg) {
        this.status = setterArg;
        return this;
      }
      private @Nullable String error;
      public @NonNull Builder setError(@Nullable String setterArg) {
        this.error = setterArg;
        return this;
      }
      private @Nullable Double batteryPercent;
      public @NonNull Builder setBatteryPercent(@Nullable Double setterArg) {
        this.batteryPercent = setterArg;
        return this;
      }
      private @Nullable Double altitude;
      public @NonNull Builder setAltitude(@Nullable Double setterArg) {
        this.altitude = setterArg;
        return this;
      }
      private @Nullable Double latitude;
      public @NonNull Builder setLatitude(@Nullable Double setterArg) {
        this.latitude = setterArg;
        return this;
      }
      private @Nullable Double longitude;
      public @NonNull Builder setLongitude(@Nullable Double setterArg) {
        this.longitude = setterArg;
        return this;
      }
      private @Nullable Double speed;
      public @NonNull Builder setSpeed(@Nullable Double setterArg) {
        this.speed = setterArg;
        return this;
      }
      private @Nullable Double roll;
      public @NonNull Builder setRoll(@Nullable Double setterArg) {
        this.roll = setterArg;
        return this;
      }
      private @Nullable Double pitch;
      public @NonNull Builder setPitch(@Nullable Double setterArg) {
        this.pitch = setterArg;
        return this;
      }
      private @Nullable Double yaw;
      public @NonNull Builder setYaw(@Nullable Double setterArg) {
        this.yaw = setterArg;
        return this;
      }
      private @Nullable Double homeLatitude;
      public @NonNull Builder setHomeLatitude(@Nullable Double setterArg) {
        this.homeLatitude = setterArg;
        return this;
      }
      private @Nullable Double homeLongitude;
      public @NonNull Builder setHomeLongitude(@Nullable Double setterArg) {
        this.homeLongitude = setterArg;
        return this;
      }
      public @NonNull Drone build() {
        Drone pigeonReturn = new Drone();
        pigeonReturn.setUuid(uuid);
        pigeonReturn.setStatus(status);
        pigeonReturn.setError(error);
        pigeonReturn.setBatteryPercent(batteryPercent);
        pigeonReturn.setAltitude(altitude);
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setSpeed(speed);
        pigeonReturn.setRoll(roll);
        pigeonReturn.setPitch(pitch);
        pigeonReturn.setYaw(yaw);
        pigeonReturn.setHomeLatitude(homeLatitude);
        pigeonReturn.setHomeLongitude(homeLongitude);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(uuid);
      toListResult.add(status);
      toListResult.add(error);
      toListResult.add(batteryPercent);
      toListResult.add(altitude);
      toListResult.add(latitude);
      toListResult.add(longitude);
      toListResult.add(speed);
      toListResult.add(roll);
      toListResult.add(pitch);
      toListResult.add(yaw);
      toListResult.add(homeLatitude);
      toListResult.add(homeLongitude);
      return toListResult;
    }
    static @NonNull Drone fromList(@NonNull ArrayList<Object> list) {
      Drone pigeonResult = new Drone();
      Object uuid = list.get(0);
      pigeonResult.setUuid((String)uuid);
      Object status = list.get(1);
      pigeonResult.setStatus((String)status);
      Object error = list.get(2);
      pigeonResult.setError((String)error);
      Object batteryPercent = list.get(3);
      pigeonResult.setBatteryPercent((Double)batteryPercent);
      Object altitude = list.get(4);
      pigeonResult.setAltitude((Double)altitude);
      Object latitude = list.get(5);
      pigeonResult.setLatitude((Double)latitude);
      Object longitude = list.get(6);
      pigeonResult.setLongitude((Double)longitude);
      Object speed = list.get(7);
      pigeonResult.setSpeed((Double)speed);
      Object roll = list.get(8);
      pigeonResult.setRoll((Double)roll);
      Object pitch = list.get(9);
      pigeonResult.setPitch((Double)pitch);
      Object yaw = list.get(10);
      pigeonResult.setYaw((Double)yaw);
      Object homeLatitude = list.get(11);
      pigeonResult.setHomeLatitude((Double)homeLatitude);
      Object homeLongitude = list.get(12);
      pigeonResult.setHomeLongitude((Double)homeLongitude);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Media {
    private @Nullable String fileName;
    public @Nullable String getFileName() { return fileName; }
    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @Nullable String fileUrl;
    public @Nullable String getFileUrl() { return fileUrl; }
    public void setFileUrl(@Nullable String setterArg) {
      this.fileUrl = setterArg;
    }

    private @Nullable Long fileIndex;
    public @Nullable Long getFileIndex() { return fileIndex; }
    public void setFileIndex(@Nullable Long setterArg) {
      this.fileIndex = setterArg;
    }

    public static final class Builder {
      private @Nullable String fileName;
      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }
      private @Nullable String fileUrl;
      public @NonNull Builder setFileUrl(@Nullable String setterArg) {
        this.fileUrl = setterArg;
        return this;
      }
      private @Nullable Long fileIndex;
      public @NonNull Builder setFileIndex(@Nullable Long setterArg) {
        this.fileIndex = setterArg;
        return this;
      }
      public @NonNull Media build() {
        Media pigeonReturn = new Media();
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setFileUrl(fileUrl);
        pigeonReturn.setFileIndex(fileIndex);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(fileName);
      toListResult.add(fileUrl);
      toListResult.add(fileIndex);
      return toListResult;
    }
    static @NonNull Media fromList(@NonNull ArrayList<Object> list) {
      Media pigeonResult = new Media();
      Object fileName = list.get(0);
      pigeonResult.setFileName((String)fileName);
      Object fileUrl = list.get(1);
      pigeonResult.setFileUrl((String)fileUrl);
      Object fileIndex = list.get(2);
      pigeonResult.setFileIndex((fileIndex == null) ? null : ((fileIndex instanceof Integer) ? (Integer)fileIndex : (Long)fileIndex));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class Stream {
    private @Nullable byte[] data;
    public @Nullable byte[] getData() { return data; }
    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    public static final class Builder {
      private @Nullable byte[] data;
      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull Stream build() {
        Stream pigeonReturn = new Stream();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(data);
      return toListResult;
    }
    static @NonNull Stream fromList(@NonNull ArrayList<Object> list) {
      Stream pigeonResult = new Stream();
      Object data = list.get(0);
      pigeonResult.setData((byte[])data);
      return pigeonResult;
    }
  }
  private static class DjiHostApiCodec extends StandardMessageCodec {
    public static final DjiHostApiCodec INSTANCE = new DjiHostApiCodec();
    private DjiHostApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Battery.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)129:         
          return Media.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)130:         
          return Version.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Battery) {
        stream.write(128);
        writeValue(stream, ((Battery) value).toList());
      } else 
      if (value instanceof Media) {
        stream.write(129);
        writeValue(stream, ((Media) value).toList());
      } else 
      if (value instanceof Version) {
        stream.write(130);
        writeValue(stream, ((Version) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface DjiHostApi {
    @NonNull Version getPlatformVersion();
    @NonNull Battery getBatteryLevel();
    void registerApp();
    void connectDrone();
    void disconnectDrone();
    void delegateDrone();
    void takeOff();
    void land();
    void start(@NonNull String flightJson);
    void setDroneHomeLocation(@NonNull Double latitude, @NonNull Double longitude);
    void mobileRemoteController(@NonNull Boolean enabled, @NonNull Double leftStickHorizontal, @NonNull Double leftStickVertical, @NonNull Double rightStickHorizontal, @NonNull Double rightStickVertical);
    void virtualStick(@NonNull Boolean enabled, @NonNull Double pitch, @NonNull Double roll, @NonNull Double yaw, @NonNull Double verticalThrottle);
    void gimbalRotatePitch(@NonNull Double degrees);
    @NonNull List<Media> getMediaList();
    @NonNull String downloadMedia(@NonNull Long fileIndex);
    @NonNull Boolean deleteMedia(@NonNull Long fileIndex);
    void videoFeedStart();
    void videoFeedStop();
    void videoRecordStart();
    void videoRecordStop();

    /** The codec used by DjiHostApi. */
    static MessageCodec<Object> getCodec() {
      return       DjiHostApiCodec.INSTANCE;    }
    /**Sets up an instance of `DjiHostApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, DjiHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.getPlatformVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              Version output = api.getPlatformVersion();
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.getBatteryLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              Battery output = api.getBatteryLevel();
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.registerApp", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.registerApp();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.connectDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.connectDrone();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.disconnectDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.disconnectDrone();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.delegateDrone", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.delegateDrone();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.takeOff", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.takeOff();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.land", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.land();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String flightJsonArg = (String)args.get(0);
              if (flightJsonArg == null) {
                throw new NullPointerException("flightJsonArg unexpectedly null.");
              }
              api.start(flightJsonArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.setDroneHomeLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Double latitudeArg = (Double)args.get(0);
              if (latitudeArg == null) {
                throw new NullPointerException("latitudeArg unexpectedly null.");
              }
              Double longitudeArg = (Double)args.get(1);
              if (longitudeArg == null) {
                throw new NullPointerException("longitudeArg unexpectedly null.");
              }
              api.setDroneHomeLocation(latitudeArg, longitudeArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.mobileRemoteController", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              Double leftStickHorizontalArg = (Double)args.get(1);
              if (leftStickHorizontalArg == null) {
                throw new NullPointerException("leftStickHorizontalArg unexpectedly null.");
              }
              Double leftStickVerticalArg = (Double)args.get(2);
              if (leftStickVerticalArg == null) {
                throw new NullPointerException("leftStickVerticalArg unexpectedly null.");
              }
              Double rightStickHorizontalArg = (Double)args.get(3);
              if (rightStickHorizontalArg == null) {
                throw new NullPointerException("rightStickHorizontalArg unexpectedly null.");
              }
              Double rightStickVerticalArg = (Double)args.get(4);
              if (rightStickVerticalArg == null) {
                throw new NullPointerException("rightStickVerticalArg unexpectedly null.");
              }
              api.mobileRemoteController(enabledArg, leftStickHorizontalArg, leftStickVerticalArg, rightStickHorizontalArg, rightStickVerticalArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.virtualStick", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Boolean enabledArg = (Boolean)args.get(0);
              if (enabledArg == null) {
                throw new NullPointerException("enabledArg unexpectedly null.");
              }
              Double pitchArg = (Double)args.get(1);
              if (pitchArg == null) {
                throw new NullPointerException("pitchArg unexpectedly null.");
              }
              Double rollArg = (Double)args.get(2);
              if (rollArg == null) {
                throw new NullPointerException("rollArg unexpectedly null.");
              }
              Double yawArg = (Double)args.get(3);
              if (yawArg == null) {
                throw new NullPointerException("yawArg unexpectedly null.");
              }
              Double verticalThrottleArg = (Double)args.get(4);
              if (verticalThrottleArg == null) {
                throw new NullPointerException("verticalThrottleArg unexpectedly null.");
              }
              api.virtualStick(enabledArg, pitchArg, rollArg, yawArg, verticalThrottleArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.gimbalRotatePitch", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Double degreesArg = (Double)args.get(0);
              if (degreesArg == null) {
                throw new NullPointerException("degreesArg unexpectedly null.");
              }
              api.gimbalRotatePitch(degreesArg);
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.getMediaList", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              List<Media> output = api.getMediaList();
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.downloadMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Number fileIndexArg = (Number)args.get(0);
              if (fileIndexArg == null) {
                throw new NullPointerException("fileIndexArg unexpectedly null.");
              }
              String output = api.downloadMedia((fileIndexArg == null) ? null : fileIndexArg.longValue());
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.deleteMedia", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Number fileIndexArg = (Number)args.get(0);
              if (fileIndexArg == null) {
                throw new NullPointerException("fileIndexArg unexpectedly null.");
              }
              Boolean output = api.deleteMedia((fileIndexArg == null) ? null : fileIndexArg.longValue());
              wrapped.add(0, output);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.videoFeedStart", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.videoFeedStart();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.videoFeedStop", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.videoFeedStop();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.videoRecordStart", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.videoRecordStart();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiHostApi.videoRecordStop", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            ArrayList wrapped = new ArrayList<>();
            try {
              api.videoRecordStop();
              wrapped.add(0, null);
            }
            catch (Error | RuntimeException exception) {
              ArrayList<Object> wrappedError = wrapError(exception);
              wrapped = wrappedError;
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class DjiFlutterApiCodec extends StandardMessageCodec {
    public static final DjiFlutterApiCodec INSTANCE = new DjiFlutterApiCodec();
    private DjiFlutterApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return Drone.fromList((ArrayList<Object>) readValue(buffer));
        
        case (byte)129:         
          return Stream.fromList((ArrayList<Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value)     {
      if (value instanceof Drone) {
        stream.write(128);
        writeValue(stream, ((Drone) value).toList());
      } else 
      if (value instanceof Stream) {
        stream.write(129);
        writeValue(stream, ((Stream) value).toList());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class DjiFlutterApi {
    private final BinaryMessenger binaryMessenger;
    public DjiFlutterApi(BinaryMessenger argBinaryMessenger){
      this.binaryMessenger = argBinaryMessenger;
    }
    public interface Reply<T> {
      void reply(T reply);
    }
    /** The codec used by DjiFlutterApi. */
    static MessageCodec<Object> getCodec() {
      return       DjiFlutterApiCodec.INSTANCE;
    }
    public void setStatus(@NonNull Drone droneArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiFlutterApi.setStatus", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(droneArg)), channelReply -> {
        callback.reply(null);
      });
    }
    public void sendVideo(@NonNull Stream streamArg, Reply<Void> callback) {
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.DjiFlutterApi.sendVideo", getCodec());
      channel.send(new ArrayList<Object>(Collections.singletonList(streamArg)), channelReply -> {
        callback.reply(null);
      });
    }
  }
  @NonNull private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    errorList.add(exception.toString());
    errorList.add(exception.getClass().getSimpleName());
    errorList.add("Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorList;
  }
}
